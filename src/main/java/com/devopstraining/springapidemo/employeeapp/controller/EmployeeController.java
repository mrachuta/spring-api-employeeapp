package com.devopstraining.springapidemo.employeeapp.controller;

import com.devopstraining.springapidemo.employeeapp.exception.ResourceNotFoundException;
import com.devopstraining.springapidemo.employeeapp.model.Employee;
import com.devopstraining.springapidemo.employeeapp.repository.EmployeeRepository;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

@RestController
public class EmployeeController {
  static String notFoundMessage = "Employee with following id not found: ";
  static String notAvailableMessage = "Not available";

  @Autowired private EmployeeRepository employeeRepository;

  @GetMapping(path = "/", produces = MediaType.APPLICATION_JSON_VALUE)
  public String index() {
    return "{\"message\": \"Welcome to EmployeeApp\"}";
  }

  // Endpoint generated by Chat-GPT
  @GetMapping(path = "/info", produces = MediaType.APPLICATION_JSON_VALUE)
  public String info() {
    // Extracting general request information
    String ipAddress = notAvailableMessage;
    String userAgent = notAvailableMessage;
    String acceptLanguage = notAvailableMessage;

    // Extracting connection details
    String method = notAvailableMessage;
    String protocol = notAvailableMessage;
    String serverName = notAvailableMessage;
    int serverPort = -1;

    // Extracting date and time
    LocalDateTime now = LocalDateTime.now();
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    String formattedDateTime = now.format(formatter);

    // Extracting request details
    String characterEncoding = notAvailableMessage;
    String cookies = notAvailableMessage;

    // Try to obtain the HttpServletRequest
    ServletRequestAttributes attributes =
        (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
    if (attributes != null) {
      ipAddress = attributes.getRequest().getRemoteAddr();
      userAgent = attributes.getRequest().getHeader("User-Agent");
      acceptLanguage = attributes.getRequest().getHeader("Accept-Language");

      method = attributes.getRequest().getMethod();
      protocol = attributes.getRequest().getProtocol();
      serverName = attributes.getRequest().getServerName();
      serverPort = attributes.getRequest().getServerPort();

      characterEncoding = attributes.getRequest().getCharacterEncoding();
      cookies = attributes.getRequest().getHeader("Cookie");
    }

    // Construct the JSON response
    return String.format(
        "{\"ipAddress\": \"%s\", \"userAgent\": \"%s\", \"acceptLanguage\": \"%s\", \"method\":"
            + " \"%s\", \"protocol\": \"%s\", \"serverName\": \"%s\", \"serverPort\": %d,"
            + " \"dateTime\": \"%s\", \"characterEncoding\": \"%s\", \"cookies\": \"%s\"}",
        ipAddress,
        userAgent,
        acceptLanguage,
        method,
        protocol,
        serverName,
        serverPort,
        formattedDateTime,
        characterEncoding,
        cookies);
  }

  @GetMapping(path = "/api/v1/employees", produces = MediaType.APPLICATION_JSON_VALUE)
  public List<Employee> getAllEmployees() {
    return employeeRepository.findAll();
  }

  @GetMapping(path = "/api/v1/employees/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
  public ResponseEntity<Employee> getEmployeeById(@PathVariable(value = "id") Long employeeId)
      throws ResourceNotFoundException {
    Employee employee =
        employeeRepository
            .findById(employeeId)
            .orElseThrow(() -> new ResourceNotFoundException(notFoundMessage + employeeId));
    return ResponseEntity.ok().body(employee);
  }

  @PostMapping(path = "/api/v1/employees", produces = MediaType.APPLICATION_JSON_VALUE)
  public Employee createEmployee(@Valid @RequestBody Employee employee) {
    return employeeRepository.save(employee);
  }

  @PutMapping(path = "/api/v1/employees/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
  public ResponseEntity<Employee> updateEmployee(
      @PathVariable(value = "id") Long employeeId, @Valid @RequestBody Employee employeeDetails)
      throws ResourceNotFoundException {
    Employee employee =
        employeeRepository
            .findById(employeeId)
            .orElseThrow(() -> new ResourceNotFoundException(notFoundMessage + employeeId));

    employee.setEmailId(employeeDetails.getEmailId());
    employee.setLastName(employeeDetails.getLastName());
    employee.setFirstName(employeeDetails.getFirstName());
    final Employee updatedEmployee = employeeRepository.save(employee);
    return ResponseEntity.ok(updatedEmployee);
  }

  @DeleteMapping(path = "/api/v1/employees/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
  public Map<String, Boolean> deleteEmployee(@PathVariable(value = "id") Long employeeId)
      throws ResourceNotFoundException {
    Employee employee =
        employeeRepository
            .findById(employeeId)
            .orElseThrow(() -> new ResourceNotFoundException(notFoundMessage + employeeId));

    employeeRepository.delete(employee);
    Map<String, Boolean> response = new HashMap<>();
    response.put("deleted", Boolean.TRUE);
    return response;
  }
}
