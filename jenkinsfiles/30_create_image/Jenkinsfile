@Library('jenkins-shared-libs') _

properties([
    parameters([
        [$class: 'ChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select package to create image',
            name: 'NEXUS_PACKAGE',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script:
                        "return 'Could not get packages from Nexus'"
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script:
                    // Remove whitespaces and hidden chars
                    '''
                    import groovy.json.*

                    nexusCredentials = 'technical-account-ldap'
                    def PASSWORD = com.cloudbees.plugins.credentials.SystemCredentialsProvider.getInstance().getStore().getCredentials(com.cloudbees.plugins.credentials.domains.Domain.global()).find { it.getId().equals(nexusCredentials) }.getPassword()
                    def USERNAME = com.cloudbees.plugins.credentials.SystemCredentialsProvider.getInstance().getStore().getCredentials(com.cloudbees.plugins.credentials.domains.Domain.global()).find { it.getId().equals(nexusCredentials) }.getUsername()
                    def nexusUrl = 'https://nexus3.k8s.lan/service/rest/v1/search/assets?group=com.devopstraining.springapidemo&name=employeeapp&maven.extension=war&maven.classifier'
                    def authDataEnc = "${USERNAME}:${PASSWORD}".bytes.encodeBase64()
                    String json = new URL(nexusUrl).getText(requestProperties: ['Authorization': 'Basic ' + authDataEnc])
                    def jsonSlupper = new JsonSlurper().parse(json.bytes)
                    def packagesList = jsonSlupper["items"].collect { "${it['maven2']['groupId']} ${it['maven2']['artifactId']} ${it['maven2']['version']}" }
                    // Sort hint from here: https://stackoverflow.com/a/20386474
                    return packagesList.sort(false).reverse()
                    '''.stripIndent().trim()
                ]
            ]
        ]
    ])
])

pipeline {
    agent {
        label 'gcp'
    }
    options {
        buildDiscarder(
            logRotator(numToKeepStr: '5')
        )
        timestamps()
        disableConcurrentBuilds()
        timeout(
            time: 1,
            unit: 'HOURS'
        )
        durabilityHint('PERFORMANCE_OPTIMIZED')
        ansiColor('xterm')
        // Added because of multiple agents
        skipDefaultCheckout()
    }
    environment {
        APP_NAME = 'EmployeeApp'
        PRIVATE_REGISTRY_ADDRESS = 'nexus3.k8s.lan:50000'
        PRIVATE_REGISTRY_ADDRESS_PULL = 'nexus3.k8s.lan:50001'
        GCP_DEV_CREDENTIALS = 'gcp-terraform-sa-dev'
    }
    stages {
        stage('Clone repo and prepare variables') {
            steps {
                script {
                    // Briliant hint: https://stackoverflow.com/a/48567672
                    scmVars = checkout(scm)
                    env.GIT_BRANCH = scmVars.GIT_BRANCH
                    env.GIT_URL = scmVars.GIT_URL
                    env.GIT_COMMIT = scmVars.GIT_COMMIT
                    echo "Git repo url: ${env.GIT_URL}"
                    echo "Git branch: ${env.GIT_BRANCH}"
                    echo 'Exposing gcp-specific env variables...'
                    // Exposing multiple variables like GCP_PROJECT etc.
                    exposeVariablesFromConfigFile(configFileProviderFileId: 'gcp-config-dev')
                    env.SHORT_JOB_ID = env.JOB_NAME.replaceAll("%2F|_|/", "-").take(45)
                }
            }
        }
        stage('Download package from Nexus') {
            steps {
                script {
                    withCredentials([
                        usernamePassword(
                            credentialsId: 'technical-account-ldap',
                            usernameVariable: 'NEXUS_USERNAME',
                            passwordVariable: 'NEXUS_PASSWORD'
                        )
                    ]) {
                        env.ARTIFACT_G = params.NEXUS_PACKAGE.split(' ')[0].trim()
                        env.ARTIFACT_I = params.NEXUS_PACKAGE.split(' ')[1].trim()
                        env.ARTIFACT_V = params.NEXUS_PACKAGE.split(' ')[2].trim()
                        sh('''
                            curl -k -L --create-dirs --output-dir target -o "${ARTIFACT_I}.war" -X GET --user "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" \
                            "https://nexus3.k8s.lan/service/rest/v1/search/assets/download?group=${ARTIFACT_G}&name=${ARTIFACT_I}&version=${ARTIFACT_V}&maven.extension=war&maven.classifier"
                        ''')
                    }
                }
            }
        }
        stage('Create GCP image') {
            steps {
                withCredentials([
                    file(
                        credentialsId: 'gcp-packer-sa-dev',
                        variable: 'GCP_CREDENTIALS'
                    )
                ]) {
                    dir('packer') {
                        sh('''
                            export GOOGLE_APPLICATION_CREDENTIALS=$GCP_CREDENTIALS
                            export GOOGLE_PROJECT=$GCP_PROJECT
                            packer init config.pkr.hcl
                            export PKR_VAR_project_id=$GOOGLE_PROJECT
                            #packer build .
                        ''')
                    }
                }
            }
        }
        stage('Get image as VMDK') {
            steps {
                withCredentials([
                    file(
                        credentialsId: env.GCP_DEV_CREDENTIALS,
                        variable: 'GCP_CREDENTIALS'
                    )
                ]) {
                    sh('''
                        #gcloud auth activate-service-account $GCP_TERRAFORM_SA --key-file=$GCP_CREDENTIALS
                        #gcloud config set project $GCP_PROJECT
                        #gsutil mb gs://tmp-$SHORT_JOB_ID-$BUILD_NUMBER
                        #gcloud compute images export \
                        --destination-uri gs://tmp-$SHORT_JOB_ID-$BUILD_NUMBER/$APP_NAME-latest.vmdk \
                        --export-format=vmdk \
                        --image $(gcloud compute images describe-from-family \
                        --project $GCP_PROJECT $IMAGE_FAMILY --format="value(name)")
                        #gsutil cp gs://tmp-$SHORT_JOB_ID-$BUILD_NUMBER/$APP_NAME-latest.vmdk .
                        #gsutil rm -r gs://tmp-$SHORT_JOB_ID-$BUILD_NUMBER
                    ''')
                }
                stash(name: 'wsAfterImage')
            }
        }
        stage('SCA analysis of image') {
            agent {
                kubernetes {
                    inheritFrom('default')
                    yaml("""
                    spec:
                      containers:
                        - name: trivy
                          image: "${env.PRIVATE_REGISTRY_ADDRESS_PULL}/aquasec/trivy:latest"
                          command:
                            - "sleep"
                          args:
                            - "999999"
                    """)
                }
            }
            steps {
                container(name: 'trivy') {
                    unstash(name: 'wsAfterImage')
                    /* 
                    || true added because of errors; created discussion
                    on GH: https://github.com/aquasecurity/trivy/discussions/5876
                    */
                    sh('''
                        #trivy vm *.vmdk \
                        --no-progress \
                        --scanners vuln,secret,misconfig \
                        --format template --template "@/contrib/junit.tpl" \
                        -o trivy-junit-report.xml || true
                    ''')
                    junit(
                        allowEmptyResults: true,
                        skipMarkingBuildUnstable: false,
                        skipPublishingChecks: true,
                        testResults: 'trivy-junit-report.xml'
                    )
                }
            }
        }
        stage('Deploy to DEV') {
            steps {
                script {
                    // Replace / in branch name to encoded value
                    gitBranchEnc = (env.GIT_BRANCH).replace("/", "%252F")
                    build(
                        job: "50_deploy_spring-api-employeeapp/${gitBranchEnc}",
                        wait: true,
                        parameters: [
                            string(name: 'TARGET_GCP_PROJECT', value: env.GCP_PROJECT),
                            string(name: 'TF_CREDENTIALS', value: env.GCP_DEV_CREDENTIALS),
                            string(name: 'TF_ACTION', value: 'apply')
                        ]
                    )
                    withCredentials([
                        file(
                            credentialsId: env.GCP_DEV_CREDENTIALS,
                            variable: 'GCP_CREDENTIALS'
                        )
                    ]) {
                        dir("infra/env/${GCP_ENV_ALIAS}") {
                            sh('''
                                export GOOGLE_APPLICATION_CREDENTIALS=$GCP_CREDENTIALS
                                export GOOGLE_PROJECT=$GCP_PROJECT
                                export ENV_NAME=$GCP_ENV_ALIAS
                                terraform init
                            ''')
                            env.APP_URL = sh(
                                script: '''
                                    export GOOGLE_APPLICATION_CREDENTIALS=$GCP_CREDENTIALS
                                    export GOOGLE_PROJECT=$GCP_PROJECT
                                    export ENV_NAME=$GCP_ENV_ALIAS
                                    terraform output -raw ext_lb_ip_output_clickable_https
                                ''',
                                returnStdout: true
                            )
                        }
                    }
                }
            }
        }
        stage('DAST scan') {
            agent {
                kubernetes {
                    inheritFrom('default')
                    yaml("""
                    spec:
                      containers:
                        - name: trivy
                          image: "${env.PRIVATE_REGISTRY_ADDRESS_PULL}/owasp/zap2docker-stable:latest"
                          command:
                            - "sleep"
                          args:
                            - "999999"
                    """)
                }
            }
            steps {
                container(name: 'owaspzap') {
                    echo "hello from owasp zap container, let's test ${env.APP_URL}"
                }
            }
        }
    }
    post {
        cleanup {
            cleanWs()
        }
    }
}
