pipeline {
    agent {
        label 'gcp'
    }
    options {
        buildDiscarder(
            logRotator(numToKeepStr: '5')
        )
        timestamps()
        disableConcurrentBuilds()
        timeout(
            time: 1,
            unit: 'HOURS'
        )
        durabilityHint('PERFORMANCE_OPTIMIZED')
        ansiColor('xterm')
    }
    parameters {
        string(
            name: 'TARGET_GCP_PROJECT',
            defaultValue: 'changeme',
            description: 'Provide name of GCP project where image will be promoted'
        )
    }
    stages {
        stage('Prepare variables') {
            steps {
                script {
                    echo "Git repo url: ${env.GIT_URL}"
                    echo "Git branch: ${env.GIT_BRANCH}"
                    echo 'Exposing gcp-specific env variables...'
                    configFileProvider([
                        configFile(
                            fileId: 'gcp-config-dev',
                            variable: 'GCP_CONFIGURATION'
                        )
                    ]) {
                        // Split by each line, then split by '=' and remove quotes
                        gcpVariables = readFile("${env.GCP_CONFIGURATION}").split('\n').collect { gcpVar ->
                            gcpVar.split('=').last().replaceAll("^\"|^\'|\'\$|\"\$", "")
                        }
                        env.GCP_PROJECT = gcpVariables[0]
                        env.GCP_PACKER_SA = gcpVariables[1]
                        env.GCP_TERRAFORM_SA = gcpVariables[2]
                        env.PROJECT_REGION = gcpVariables[3]
                        env.PROJECT_ZONE = gcpVariables[4]
                        env.IMAGE_FAMILY = gcpVariables[5]
                        env.IMAGE_LOCATION = gcpVariables[6]

                    }
                }
            }
        }
        stage('Promote GCP Image') {
            steps {
                withCredentials([
                    file(
                        credentialsId: 'gcp-terraform-sa-dev',
                        variable: 'GCP_CREDENTIALS'
                )]) {
                    script {
                        sh '''
                            gcloud auth activate-service-account $GCP_TERRAFORM_SA --key-file=$GCP_CREDENTIALS
                            gcloud config set project $GCP_PROJECT
                        '''
                        imagesList = sh(
                            script: '''
                                gcloud compute images list --filter="family:${IMAGE_FAMILY}" \
                                --format="value(name)"
                            ''',
                            returnStdout: true
                        ).tokenize()
                        timeout(time: 20, unit: 'MINUTES') {
                            imageToPromote = input(
                                message: "Select image to be promoted to project ${env.TARGET_GCP_PROJECT}",
                                id: 'promotionInput',
                                ok: 'Promote!',
                                submitterParameter:'promotionApprovedBy',
                                parameters: [
                                    choice(
                                        choices: imagesList,
                                        description: "Select image to be promoted to project ${env.TARGET_GCP_PROJECT}",
                                        name: 'imageName'
                                    )
                                ]
                            )
                        }
                        env.IMAGE_TO_PROMOTE = imageToPromote.imageName
                        echo "Image selected to promotion: ${env.IMAGE_TO_PROMOTE}"
                        echo "Target project: ${env.TARGET_GCP_PROJECT}"
                        sh '''
                            gcloud compute --project=${TARGET_GCP_PROJECT} images create $IMAGE_TO_PROMOTE \
                            --family=${IMAGE_FAMILY} \
                            --source-image=${IMAGE_TO_PROMOTE} \
                            --source-image-project=${GCP_PROJECT} \
                            --storage-location=${IMAGE_LOCATION}
                        '''
                    }
                }
            }
        }
    }
    post {
        cleanup {
            cleanWs()
        }
    }
}
