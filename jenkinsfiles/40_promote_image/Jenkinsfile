@Library('jenkins-shared-libs') _

pipeline {
    agent {
        label 'gcp'
    }
    options {
        buildDiscarder(
            logRotator(numToKeepStr: '5')
        )
        timestamps()
        disableConcurrentBuilds()
        timeout(
            time: 1,
            unit: 'HOURS'
        )
        durabilityHint('PERFORMANCE_OPTIMIZED')
        ansiColor('xterm')
    }
    parameters {
        string(
            name: 'TARGET_GCP_PROJECT',
            defaultValue: 'changeme',
            description: 'Provide name of GCP project where image will be promoted'
        )
    }
    stages {
        stage('Prepare variables') {
            steps {
                script {
                    echo "Git repo url: ${env.GIT_URL}"
                    echo "Git branch: ${env.GIT_BRANCH}"
                    echo 'Exposing gcp-specific env variables...'
                    // Exposing multiple variables like GCP_PROJECT etc.
                    exposeVariablesFromConfigFile(configFileProviderFileId: 'gcp-config-dev')
                }
            }
        }
        stage('Promote GCP Image') {
            steps {
                withCredentials([
                    file(
                        credentialsId: 'gcp-packer-sa-dev',
                        variable: 'GCP_CREDENTIALS'
                    )
                ]) {
                    script {
                        sh('''
                            gcloud auth activate-service-account $GCP_PACKER_SA \
                            --key-file=$GCP_CREDENTIALS
                            gcloud config set project $GCP_PROJECT
                        ''')
                        try {
                            imagesList = sh(
                                script: '''
                                    gcloud compute images list --filter="family:${IMAGE_FAMILY}" \
                                    --format="value(name)"
                                ''',
                                returnStdout: true
                            ).tokenize()
                        } catch(Exception e) {
                            error(
                                "Are you sure that repository contains images matching following filter \"family:${env.IMAGE_FAMILY}\""
                            )
                        }
                        timeout(time: 20, unit: 'MINUTES') {
                            imageToPromote = input(
                                message: "Select image to be promoted to project ${env.TARGET_GCP_PROJECT}",
                                id: 'promotionInput',
                                ok: 'Promote!',
                                submitterParameter:'promotionApprovedBy',
                                parameters: [
                                    choice(
                                        choices: imagesList,
                                        description: "Select image to be promoted to project ${env.TARGET_GCP_PROJECT}",
                                        name: 'imageName'
                                    )
                                ]
                            )
                        }
                        env.IMAGE_TO_PROMOTE = imageToPromote.imageName
                        echo "Image selected to promotion: ${env.IMAGE_TO_PROMOTE}"
                        echo "Target project: ${env.TARGET_GCP_PROJECT}"
                        sh('''
                            gcloud compute --project=${TARGET_GCP_PROJECT} images create $IMAGE_TO_PROMOTE \
                            --family=${IMAGE_FAMILY} \
                            --source-image=${IMAGE_TO_PROMOTE} \
                            --source-image-project=${GCP_PROJECT} \
                            --storage-location=${IMAGE_LOCATION}
                        ''')
                    }
                }
            }
        }
    }
    post {
        cleanup {
            cleanWs()
        }
    }
}
