@Library('jenkins-shared-libs') _

def privateRegistryAddress = 'nexus3.k8s.lan:50000'
def privateRegistryAddressPull = 'nexus3.k8s.lan:50001'
def sonarQgStatus = 'UNKNOWN'

pipeline {
    agent {
        label 'jenkins'
    }
    // TODO: move to stage to avoid installation on all nodes
    tools {
        maven 'maven_latest'
    }
    options {
        buildDiscarder(
            logRotator(numToKeepStr: '5')
        )
        timestamps()
        disableConcurrentBuilds()
        timeout(
            time: 1,
            unit: 'HOURS'
        )
        durabilityHint('PERFORMANCE_OPTIMIZED')
        ansiColor('xterm')
        // Added because of multiple agents
        skipDefaultCheckout()
    }
    parameters {
        booleanParam(
            name: 'NEXUS_DEPLOY',
            defaultValue: false,
            description: 'Do you want to run mvn deploy phase and deploy artifact to nexus?'
        )
    }
    stages {
        stage('Clone repo') {
            steps {
                // Briliant hint: https://stackoverflow.com/a/48567672
                script {
                    scmVars = checkout scm
                    env.GIT_BRANCH = scmVars.GIT_BRANCH
                    env.GIT_URL = scmVars.GIT_URL
                    env.GIT_COMMIT = scmVars.GIT_COMMIT
                }
            }
        }
        stage('Compile project') {
            steps {
                runMaven(
                    mavenConfigFileId: 'mvn_custom.xml',
                    cmd: 'mvn -U -B -DskipTests=true compile'
                )
            }
        }
        stage('Run tests') {
            steps {
                script {
                    runMaven(
                        mavenConfigFileId: 'mvn_custom.xml',
                        cmd: 'mvn -U -B test'
                    )
                }
                junit 'target/surefire-reports/*.xml'
            }
        }
        stage('Sonarqube SAST analysis') {
            steps {
                script {
                    runSonarQubeAnalysis.maven(
                        sonarQubeServerId: 'sonarqube_default',
                        mavenConfigFileId: 'mvn_custom.xml',
                        mavenSonarGoal: 'mvn -U -B -DskipTests=true -Dsonar.projectBranch=${GIT_BRANCH} sonar:sonar'
                    )
                    // submitted SonarQube taskId is automatically attached to the pipeline context
                    runSonarQubeAnalysis.checkQualityGateResult()
                    stash 'wsAfterSq'
                }
            }
        }
        stage('Licenses compliance analysis') {
            agent {
                kubernetes {
                    inheritFrom 'default'
                    yaml """
                    spec:
                      containers:
                      - name: fossacli
                        image: "${privateRegistryAddress}/fossa-cli:latest"
                        command:
                        - "sleep"
                        args:
                        - "999999"
                    """
                }
            }
            steps {
                container('fossacli') {
                    unstash 'wsAfterSq'
                    withCredentials([string(credentialsId: 'fossa-api-key', variable: 'KEY')]) {
                        // TODO: Add report generation and parse in Jenkins
                        sh('''
                            export FOSSA_API_KEY=$KEY
                            fossa analyze --project EmployeeApp \
                            --revision $GIT_COMMIT \
                            --branch $GIT_BRANCH \
                            --project-url $GIT_URL \
                            --policy 'Single-Binary Distribution'
                            fossa test --project EmployeeApp \
                            --revision $GIT_COMMIT \
                            --format json | tee -a fossa-result.json
                        ''')
                    }
                }
            }
        }
        stage('Create artifact') {
            steps {
                runMaven(
                    mavenConfigFileId: 'mvn_custom.xml',
                    cmd: 'mvn -U -B -DskipTests=true package'
                )
                archiveArtifacts(
                    artifacts: 'target/*.jar, target/*.war',
                    fingerprint: true
                )
                stash 'wsAfterArtifact'
            }
        }
        stage('SCA analysis of artifact') {
            agent {
                kubernetes {
                    inheritFrom 'default'
                    yaml """
                    spec:
                      containers:
                      - name: trivy
                        image: "${privateRegistryAddressPull}/aquasec/trivy:latest"
                        command:
                        - "sleep"
                        args:
                        - "999999"
                    """
                }
            }
            steps {
                container('trivy') {
                    unstash 'wsAfterArtifact'
                    sh('''
                        trivy rootfs target/*.war \
                        --no-progress \
                        --scanners vuln,secret,misconfig \
                        --format template --template "@/contrib/junit.tpl" \
                        -o trivy-junit-report.xml
                    ''')
                    junit 'trivy-junit-report.xml'
                }
            }
        }
        stage('Deploy artifact to Nexus3') {
            when { expression { return params.NEXUS_DEPLOY } }
            steps {
                runMaven(
                    mavenConfigFileId: 'mvn_custom.xml',
                    cmd: 'mvn -U -B -DskipTests=true deploy'
                )
            }
        }
    }
    post {
        cleanup {
            cleanWs()
        }
    }
}
