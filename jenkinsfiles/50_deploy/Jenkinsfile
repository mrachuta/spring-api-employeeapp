@Library('jenkins-shared-libs') _

pipeline {
    agent {
        label 'gcp'
    }
    options {
        buildDiscarder(
            logRotator(numToKeepStr: '5')
        )
        timestamps()
        disableConcurrentBuilds()
        timeout(
            time: 1,
            unit: 'HOURS'
        )
        durabilityHint('PERFORMANCE_OPTIMIZED')
        ansiColor('xterm')
    }
    parameters {
        string(
            name: 'TARGET_GCP_PROJECT',
            defaultValue: 'changeme',
            description: 'Provide name of GCP project to make deployment'
        )
        string(
            name: 'TF_CREDENTIALS',
            defaultValue: 'gcp-terraform-sa-dev',
            description: 'Provide name of credentials to use with terraform'
        )
        choice(
            name: 'TF_ACTION',
            choices: ['plan', 'apply', 'plan -destroy', 'destroy'],
            description: 'Select terraform action to perform'    
        )
    }
    stages {
        stage('Prepare variables') {
            steps {
                script {
                    echo "Git repo url: ${env.GIT_URL}"
                    echo "Git branch: ${env.GIT_BRANCH}"
                    echo 'Exposing gcp-specific env variables...'
                      // Exposing multiple variables like GCP_PROJECT etc.
                    exposeVariablesFromConfigFile(configFileProviderFileId: 'gcp-config-dev')
                }
            }
        }
        stage('Run terraform') {
            environment {
                GCP_CREDENTIALS = credentials("$params.TF_CREDENTIALS")
                GOOGLE_PROJECT = "$env.GCP_PROJECT"
                ENV_NAME = "$env.GCP_ENV_ALIAS"
            }
            steps {
                script {
                    dir("infra/env/${GCP_ENV_ALIAS}") {
                        sh('''
                            terraform init -input=false
                            terraform validate
                        ''')
                        if (env.TF_ACTION == 'apply') {
                            sh('''
                                terraform plan -out=tfplan -input=false
                                terraform $TF_ACTION -input=false -auto-approve tfplan
                            ''')
                        } else if (env.TF_ACTION == 'destroy') {
                            sh('''
                                terraform plan -destroy -out=tfplan -input=false
                                terraform apply -input=false -auto-approve tfplan
                            ''')
                        } else {
                            sh('''
                                terraform $TF_ACTION -input=false
                            ''')
                        }
                    }
                }
            }
        }
    }
    post {
        cleanup {
            cleanWs()
        }
    }
}
